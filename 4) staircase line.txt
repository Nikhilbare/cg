9 Implement DDA line drawing algorithm to draw Staircase line. Divide the screen in four quadrants with center as (0, 0). The line should work for all the slopes


#include<GL/freeglut.h>
#include<GL/gl.h>
#include<GL/glut.h>
#include<iostream>
#include<math.h>
#include<stdlib.h>
using namespace std;

int xf1,yf1;
int le;
void init(){
    glClearColor(0.0,0.0,0.0,1.0);
    glColor3f(0,0,1);
    glPointSize(2.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-450,450,-250,250);
    glFlush();
}

void Bres_line(int x0,int y0,int x1,int y1){
    float dx,dy,p,m;
    dx=x1-x0;
    dy=y1-y0;
    m=dy/dx;
    p=2*dy-dx;
    int x=x0;
    int y=y0;
    if(m<1){

       for(int i=0;i<=dx;i++){
          glBegin(GL_POINTS);
          glVertex2i(x,y);
          glEnd();
          if(p<0){
            x=x+1;
            y=y;
            p=p+2*dy;
          }
          else{
            x=x+1;
            y=y+1;
            p=p+2*dy-2*dx;
          }
       }
    }

    else{
        for(int i=0;i<=dy;i++){
        glBegin(GL_POINTS);
        glVertex2i(x,y);
        glEnd();
           if(p<0){
            x=x;
            y=y+1;
            p=p+2*dx;
           }
           else{
            x=x+1;
            y=y+1;
            p=p+2*dx-2*dy;
           }
        }
    }
    glFlush();
}

void draw_patt(){
   int h=le/8;
   int b=le/8;
   xf1=10,yf1=10;
   Bres_line(xf1,yf1,xf1+le,yf1);
   Bres_line(xf1+le,yf1,xf1+le,yf1+le);
   int i;
   int x,y;

   x=xf1;
   y=yf1;
   for(i=0;i<8;i++){
     Bres_line(x,y,x,y+h);
     Bres_line(x,y+h,x+b,y+h);
     x=x+b;
     y=y+h;
   }
   glFlush();
}

int main(int argc,char **argv){
    cout<<"Enter the length::";
    cin>>le;
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(900,500);
    glutInitWindowPosition(0,0);
    glutCreateWindow("STAIRS");
    glBegin(GL_LINES);
    glColor3f(0,1,0);
    glVertex2i(-1.0f,0.0f);
    glVertex2i(1.0f,0.0f);
    glVertex2i(0.0f,-1.0f);
    glVertex2i(0.0f,1.0f);
    glEnd();
    glFlush();
    init();

    glutDisplayFunc(draw_patt);
    glutMainLoop();
return 0;
}
