2) Implement Bresenham line drawing algorithm to draw Dashed line. Divide the screen in four quadrants with center as (0, 0). The line should work for all the slopes

#include <iostream>
#include<GL/freeglut.h>
#include<GL/gl.h>
#include <GL/glut.h>
#include<math.h>
using namespace std;

void Init(){
    glClearColor(0.0f,0.0f,0.0f,1.0f);
    glColor3f(0.0,1.0,0.0);
    glMatrixMode(GL_PROJECTION);
    glPointSize(2.0);
    gluOrtho2D(-450,450,-250,250);
}
void Bres_Line(){
    int x_1=-100,y_1=-100,x_2=300,y_2=300;
    float dy, dx, m, P;
    dy = y_2 - y_1;
    dx = x_2 - x_1;
    m = dy / dx;
    P = 2 * dy - dx;
    int x = x_1, y = y_1;
    if (m < 1){
        int cnt = 1;
        for (int i = 0; i <= dx; i++){
            if (cnt <= 10){
                    glBegin(GL_POINTS);
                    glVertex2i(x, y);
                    glEnd();
                }
            cnt++;
            if (cnt == 15){
                    cnt = 1;
                }

            if (P < 0){
                x = x + 1;
                y = y;
                P = P + 2 * dy;
            }
            else{
                x = x + 1;
                y = y + 1;
                P = P + 2 * dy - 2 * dx;
            }
        }
    }
    else {
        int cnt = 1;
        for (int i = 0; i <= dy; i++){

                if (cnt <= 10){
                    glBegin(GL_POINTS);
                    glVertex2i(x, y);
                    glEnd();
                }
                cnt++;
                if (cnt == 15){
                    cnt = 1;
                }

            if (P < 0){
                x = x;
                y = y + 1;
                P = P + 2 * dx;
            }
            else{
                x = x + 1;
                y = y + 1;
                P = P + 2 * dx - 2 * dy;
            }
        }
    }
    glFlush();
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(900,500);
    glutCreateWindow("Bresenham-Line");
    glBegin(GL_LINES);
	glColor3f(1.0f,0.0f,0.0f);
	glVertex2i(-1.0f,0.0f);
	glVertex2i(1.0f,0.0f);
	glVertex2i(0.0f,-1.0f);
	glVertex2i(0.0f,1.0f);
	glEnd();
	glFlush();
    Init();
    glutDisplayFunc(Bres_Line);
    glutMainLoop();
    return  0;
}
